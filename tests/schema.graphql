type Query {
  fail(yes: Boolean! = true): Int!
  animals: AnimalQuery!
}

type Mutation {
  inc: Int!
}

enum AnimalKind {
  DOG
  CAT
}

interface Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}

type AnimalQuery {
  dogs: DogQuery!
  cats: CatQuery!
  search(filter: AnimalFilter): [Animal!]!
  allKinds: [AnimalKind!]!
  kindToString(kind: AnimalKind!): String!
}

input AnimalFilter {
  name: String
  kind: AnimalKind
}

type DogQuery {
  first: Dog
  list: [Dog!]!
  find(name: String!): Dog
}

type Dog implements Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}

type CatQuery {
  first: Cat
  list: [Cat!]!
  find(name: String!): Cat
}

type Cat implements Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}
