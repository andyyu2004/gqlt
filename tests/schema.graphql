# A scalar easy way to introduce an `any` type for testing
scalar Any

type Query {
  foo: Foo!
  foos: [Foo!]!
  fail(yes: Boolean! = true): Int!
  animals: AnimalQuery!
  recursive: Recursive!
  unions: Unions!
}

type Unions {
  ab(pick: Boolean = false): AB!
}

union AB = A | B

type A {
  id: ID!
  a: Int!
}

type B {
  id: ID!
  b: Boolean!
}

type Recursive {
  id: ID!
  next: Recursive
}

type Foo {
  id: ID!
  any: Any!
  string: String!
  int: Int!
  float: Float!
  boolean: Boolean!
}

type Mutation {
  inc: Int!
}

enum AnimalKind {
  DOG
  CAT
}

interface Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}

type AnimalQuery {
  dogs: DogQuery!
  cats: CatQuery!
  search(filter: AnimalFilter): [Animal!]!
  allKinds: [AnimalKind!]!
  kindToString(kind: AnimalKind!): String!
}

input AnimalFilter {
  name: String
  kind: AnimalKind
}

type DogQuery {
  first: Dog
  list: [Dog!]!
  find(name: String!): Dog
}

type Dog implements Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}

type CatQuery {
  first: Cat
  list: [Cat!]!
  find(name: String!): Cat
}

type Cat implements Animal {
  id: ID!
  name: String!
  kind: AnimalKind!
}
